// Possible Words From Phone Digits
// Difficulty: MediumAccuracy: 52.79%Submissions: 88K+Points: 4Average Time: 20m
// You are given a keypad (as shown in the diagram) and an array arr[ ] containing digits, your task is to list all possible words in any order which can be generated by pressing numbers in arr[] sequentially.

// Note: Number 0 and 1 do not map to any letters.
// You can return the words in any order, the driver code will print them in sorted order.

// Examples :

// Input: arr[] = [2, 3]
// Output: [ad, ae, af, bd, be, bf, cd, ce, cf]
// Explanation: When we press 2 and 3 total 3 x 3 = 9 possible words formed.
// Input: arr[] = [2]
// Output: [a, b, c]
// Explanation: When we press 2 total 3 possible words formed.
// Constraints:
// 1 ≤ arr.size() ≤ 9
// 0 ≤ arr[i] ≤ 9

class Solution {
  public ArrayList<String> possibleWords(int[] arr) {
    int n = arr.length;
    ArrayList<String> ans = new ArrayList<>();
    generate(0, ans, new StringBuilder(), n, arr);
    return ans;

  }

  private void generate(int ind, ArrayList<String> ans, StringBuilder sb, int n, int[] arr) {
    if (ind == n) {
      ans.add(sb.toString());
      return;
    }
    if (arr[ind] == 0 || arr[ind] == 1) {
      generate(ind + 1, ans, sb, n, arr);
    }
    // System.out.println(sb+","+ind);
    String chars = getString(arr[ind]);
    for (int i = 0; i < chars.length(); i++) {
      sb.append(chars.charAt(i));
      generate(ind + 1, ans, sb, n, arr);
      sb.deleteCharAt(sb.length() - 1);
    }

  }

  private String getString(int n) {
    switch (n) {
      case 2:
        return "abc";
      case 3:
        return "def";
      case 4:
        return "ghi";
      case 5:
        return "jkl";
      case 6:
        return "mno";
      case 7:
        return "pqrs";
      case 8:
        return "tuv";
      case 9:
        return "wxyz";
      default:
        return "";
    }
  }
}